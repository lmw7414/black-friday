version: "3.8"

services:
# Infra
  mysql-server:
    image: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=1234
    ports:
      - "3306:3306"
    depends_on:
      - myredis
    networks:
      - black-friday-network
    
  myredis:
    image: redis
    hostname: myredis
    ports:
      - "6379:6379"
    networks:
      - black-friday-network
    depends_on:
      cassandra-node-0:
        condition: service_healthy


  cassandra-node-0:
    image: cassandra
    environment:
      - CASSANDRA_SEEDS=cassandra-node-0,cassandra-node-1,cassandra-node-2
      - CASSANDRA_CLUSTER_NAME=MyCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=dc1
      - HEAP_NEWSIZE=128M
      - MAX_HEAP_SIZE=1024M
    ports:
      - "7000:7000"   # 노드간 클러스터 내부 통신
      - "7001:7001"   # 노드간 보안 통신에 사용
      - "9042:9042"   # CQL 클라이언트와 통신
    networks:
      - black-friday-network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 20s
      timeout: 10s
      retries: 5

  cassandra-node-1:
    image: cassandra
    environment:
      - CASSANDRA_SEEDS=cassandra-node-0,cassandra-node-1,cassandra-node-2
      - CASSANDRA_CLUSTER_NAME=MyCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=dc1
      - HEAP_NEWSIZE=128M
      - MAX_HEAP_SIZE=1024M
    ports:
      - "17000:7000"
      - "17001:7001"
      - "19042:9042"
    networks:
      - black-friday-network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 10s
      timeout: 10s
      retries: 50

  cassandra-node-2:
    image: cassandra
    environment:
      - CASSANDRA_SEEDS=cassandra-node-0,cassandra-node-1,cassandra-node-2
      - CASSANDRA_CLUSTER_NAME=MyCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=dc1
      - HEAP_NEWSIZE=128M
      - MAX_HEAP_SIZE=1024M
    ports:
      - "27000:7000"
      - "27001:7001"
      - "29042:9042"
    networks:
      - black-friday-network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 10s
      timeout: 10s
      retries: 50

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "22181:2181"
    healthcheck:
      test: nc -z localhost 2181 || exit 1
      interval: 30s
      timeout: 20s
      retries: 5
      start_period: 10s
    networks:
      - black-friday-network

  kafka1:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:9092,EXTERNAL://localhost:19092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - black-friday-network

  kafka2:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "19093:19093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:9092,EXTERNAL://localhost:19093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - black-friday-network

  kafka3:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "19094:19094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:9092,EXTERNAL://localhost:19094
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - black-friday-network

# Domain Service
  member-service:
    image: member-service
    build: 
      dockerfile: Dockerfile
      context: ./MemberService
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "8081:8080"
    depends_on:
      - mysql-server
    networks:
      - black-friday-network
      
  payment-service:
    image: payment-service
    build: 
      dockerfile: Dockerfile
      context: ./PaymentService
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "8082:8080"
    depends_on:
      - mysql-server
    networks:
      - black-friday-network

  delivery-service:
    image: delivery-service
    build: 
      dockerfile: Dockerfile
      context: ./DeliveryService
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "8083:8080"
    depends_on:
      - mysql-server
    networks:
      - black-friday-network

  catalog-service:
    image: catalog-service
    build: 
      dockerfile: Dockerfile
      context: ./CatalogService
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "8084:8080"
    depends_on:
      - mysql-server
    networks:
      - black-friday-network

  order-service:
    image: order-service
    build: 
      dockerfile: Dockerfile
      context: ./OrderService
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "8085:8080"
    depends_on:
      - mysql-server
    networks:
      - black-friday-network

  search-service:
    image: search-service
    build: 
      dockerfile: Dockerfile
      context: ./SearchService
    environment:
      - SPRING_PROFILES_ACTIVE=prod
    ports:
      - "8086:8080"
    depends_on:
      - mysql-server
    networks:
      - black-friday-network


networks:
  black-friday-network:
    driver: bridge